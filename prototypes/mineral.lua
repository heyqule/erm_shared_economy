---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 3/24/2025 7:30 PM
---
local resource_autoplace = require("resource-autoplace")
local space_age_item_sounds = require("__space-age__.prototypes.item_sounds")
local item_sounds = require("__base__.prototypes.item_sounds")
local base_tile_sounds = require("__base__/prototypes/tile/tile-sounds")
local simulations = require("__space-age__.prototypes.factoriopedia-simulations")

local Mineral = {}

function Mineral.add_resource(options)
    local name = options.name
    data.extend({
        {
            type = "item-subgroup",
            name = "erm-mineral-processes",
            group = "intermediate-products",
            order = "j"
        },
        {
            type = "autoplace-control",
            name = name,
            localised_name = {"", "[entity="..name.."]", {"entity-name."..name}},
            richness = true,
            order = "m-"..options.order,
            category = "resource"
        },
        {
            type = "resource",
            name = name,
            icon = "__erm_shared_economy__/graphics/minerals/icon.png",
            flags = {"placeable-neutral"},
            --factoriopedia_simulation = simulations.factoriopedia_uranium_ore,
            order = "a-b-"..options.order,
            tree_removal_probability = 0.8,
            tree_removal_max_distance = 32 * 32,
            walking_sound = base_tile_sounds.walking.ore,
            driving_sound = base_tile_sounds.driving.stone,
            minable =
            {
                mining_particle = "iron-ore-particle",
                mining_time = options.mining_time,
                result = name,
            },
            collision_box = {{-0.1, -0.1}, {0.1, 0.1}},
            selection_box = {{-0.5, -0.5}, {0.5, 0.5}},
            autoplace = resource_autoplace.resource_autoplace_settings
            {
                name = name,
                order = options.order,
                base_density = options.base_density,
                base_spots_per_km = options.base_spots_per_km2,
                has_starting_area_placement = options.has_starting_area_placement,
                regular_rq_factor_multiplier = options.regular_rq_factor_multiplier,
                starting_rq_factor_multiplier = options.starting_rq_factor_multiplier,
                candidate_spot_count = options.candidate_spot_count,
                tile_restriction = options.tile_restriction
            },
            stage_counts = {8000, 4000, 1000, 200},
            stages =
            {
                sheet =
                {
                    filename = "__erm_shared_economy__/graphics/minerals/stages.png",
                    priority = "extra-high",
                    width = 128,
                    height = 128,
                    frame_count = 6,
                    variation_count = 4,
                    scale = 0.25
                }
            },
            stages_effect =
            {
                sheet =
                {
                    filename = "__erm_shared_economy__/graphics/minerals/stages.png",
                    priority = "extra-high",
                    width = 128,
                    height = 128,
                    frame_count = 6,
                    variation_count = 4,
                    scale = 0.25,
                    blend_mode = "additive",
                    flags = {"light"}
                }
            },
            effect_animation_period = 5,
            effect_animation_period_deviation = 1,
            effect_darkness_multiplier = 3.6,
            min_effect_alpha = 0.2,
            max_effect_alpha = 0.3,
            mining_visualisation_tint = {r = 0.435, g = 0.659, b = 0.863, a = 1.000}, -- #cfff7fff
            map_color = {0, 0.667, 1.000}
        },
        {
            type = "item",
            name = name,
            icon = "__erm_shared_economy__/graphics/minerals/icon.png",
            pictures =
            {
                { size = 64, filename = "__erm_shared_economy__/graphics/minerals/icon.png",   scale = 0.5 },
                { size = 64, filename = "__erm_shared_economy__/graphics/minerals/icon-2.png", scale = 0.5 },
                { size = 64, filename = "__erm_shared_economy__/graphics/minerals/icon-3.png", scale = 0.5 },
                { size = 64, filename = "__erm_shared_economy__/graphics/minerals/icon-4.png", scale = 0.5 },
            },
            subgroup = "erm-mineral-processes",
            order = "a[mineral-ore]-a["..options.name.."]",
            inventory_move_sound = item_sounds.resource_inventory_move,
            pick_sound = item_sounds.resource_inventory_pickup,
            drop_sound = item_sounds.resource_inventory_move,
            stack_size = 50,
            default_import_location = options.import_location,
            weight = 2*kg
        },
    })

    if options.has_starting_area_placement then
        resource_autoplace.initialize_patch_set(name, true)
    end
end

function Mineral.add_recycle_recipe(options)
    local name = options.name
    data.extend({
        {
            type = "recipe",
            name = name.."-recycling",
            icons = {
                {
                    icon = "__quality__/graphics/icons/recycling.png"
                },
                {
                    icon = "__erm_shared_economy__/graphics/minerals/icon.png",
                    scale = 0.4
                },
                {
                    icon = "__quality__/graphics/icons/recycling-top.png"
                }
            },
            category = "recycling-or-hand-crafting",
            subgroup = "erm-mineral-processes",
            order = "a[trash]-a["..name.."-recycling]",
            enabled = options.enabled,
            auto_recycle = false,
            energy_required = options.energy_required,
            ingredients = options.ingredients,
            results = options.results
        },        
    })
end

return Mineral
